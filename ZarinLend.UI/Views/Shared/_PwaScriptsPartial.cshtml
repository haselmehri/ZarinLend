<script>
    let installPrompt = null;
    let installAppBoxVisible = false;
    let giveNotificationPermissionVisible = false;
    const btnInstallApp = $('#btnInstallApp');

    $('#btnCloseGiveNotificationAccessBox,#btnClosenstallAppBox').click((e) => {
        if (e.currentTarget.id == 'btnCloseGiveNotificationAccessBox') giveNotificationPermissionVisible = false;
        else if (e.currentTarget.id == 'btnClosenstallAppBox') installAppBoxVisible = false;

        doSomething();
    });

    const doSomething = () => {
        if (installAppBoxVisible)
            $('#installAppBox').show();
        else {
            installPrompt = null;
            $('#installAppBox').hide();
        }

        if (giveNotificationPermissionVisible)
            $('#giveNotificationAccessBox').show();
        else
            $('#giveNotificationAccessBox').hide();

        if (!giveNotificationPermissionVisible && !installAppBoxVisible)
            $('#mainContentDiv').removeClass('py-0').addClass('py-5');
        else if (giveNotificationPermissionVisible && installAppBoxVisible) {
            $('#mainContentDiv').addClass('py-0');
            $('#mainContentDiv').removeClass('py-5');
            $('#giveNotificationAccessBox').css({ 'margin-top': '0px' });
        }
        else if (giveNotificationPermissionVisible || installAppBoxVisible) {
            $('#mainContentDiv').addClass('py-0');
            $('#mainContentDiv').removeClass('py-5');
            if (giveNotificationPermissionVisible)
                $('#giveNotificationAccessBox').css({ 'margin-top': '' });
            else
                $('#installAppBox').css({ 'margin-top': '' });
        }
        else
            $('#mainContentDiv').removeClass('py-0');
    }

    window.addEventListener("beforeinstallprompt", (event) => {
        //alert("beforeinstallprompt");
        event.preventDefault();
        installAppBoxVisible = true;
        installPrompt = event;
        doSomething();
        //$('#mainContentDiv').removeClass('py-5');
        //$('#installAppBox').show();
    });

    btnInstallApp.click(async (event) => {
        event.preventDefault();
        //alert("install app button click");
        if (!installPrompt) {
            return;
        }
        const result = await installPrompt.prompt();
        console.log(`Install prompt was: ${result.outcome}`);
        doSomething();
        //disableInAppInstallPrompt();
    });

    window.addEventListener("appinstalled", () => {
        //alert("appinstalled");
        installAppBoxVisible = false;
        doSomething();
        //disableInAppInstallPrompt();
    });

    function disableInAppInstallPrompt() {
        installPrompt = null;
        $('#installAppBox').hide();
        $('#mainContentDiv').addClass('py-5');
    }
    //====================================================
    //Service Workers supported?
    if ('serviceWorker' in navigator) {
        window.addEventListener("load", () => {
            navigator.serviceWorker.register("/serviceWorker.js?v=1")
                .then((reg) => {
                    if (Notification.permission === "granted") {
                        //check if user notification identity has not sent, send it!
                        giveNotificationPermissionVisible = false;
                        //getSubscription(reg);
                        doSomething();
                    } else if (Notification.permission === "blocked") {
                        giveNotificationPermissionVisible = true;
                        unSubscription(reg);
                        doSomething();
                    } else {
                        giveNotificationPermissionVisible = true;
                        doSomething();
                        //$("#giveNotificationAccessBox").show();
                        $("#btnNotificationAccess").click(() => requestNotificationAccess(reg));
                    }
                });
        });
    } else {
        console.error(`'serviceWorker' in navigator : ${'serviceWorker' in navigator}`);
        //Your browser does not support Push Notifications or you have blocked notifications
    }

    function requestNotificationAccess(reg) {
        Notification.requestPermission(function (status) {
            //alert(status);
            //("#giveNotificationAccessBox").hide();
            if (status == "granted") {
                giveNotificationPermissionVisible = false;
                doSomething();
                getSubscription(reg);
            }
            else if (status == 'denied') {
                giveNotificationPermissionVisible = true;
                doSomething();
                unSubscription(reg);
            }
            else {
                console.log(`requestNotificationAccess->status : ${status}`);
                giveNotificationPermissionVisible = true;
                doSomething();
                //Your browser does not support Push Notifications or you have blocked notifications
            }
        });
    }

    function unSubscription(reg) {
        reg.pushManager.getSubscription().then(function (sub) {
            if (sub != null) {
                sub.unsubscribe()
                    .then(function (sub) {
                    }).catch(function (e) {
                        console.error("Unable to unsubscribe to push", e);
                    });
            }
        });
    }

    const publicKey = 'BNwmzjuUQJqbl10J_mV5tsXiUB4bK68AhlJKPx-HG_OmcnwLuZkieAbe9SLxE3REQZI1E_-PUZ_EDZ8xcoIoYaE';
    function getSubscription(reg) {
        reg.pushManager.getSubscription().then(function (sub) {
            if (sub === null) {
                reg.pushManager.subscribe({
                    userVisibleOnly: true,
                    applicationServerKey: publicKey
                }).then(function (sub) {
                    sendSubscribeProperties(sub);
                }).catch(function (e) {
                    console.error("Unable to subscribe to push", e);
                });
            } else {
                sendSubscribeProperties(sub);
            }
        });
    }

    function sendSubscribeProperties(sub) {
        let appVersion = '', userAgent = '', appCodeName = '', browserName = '', OSName = '', platform = '', isMobile = null;
        $("#endpoint").val(sub.endpoint);
        $("#p256dh").val(arrayBufferToBase64(sub.getKey("p256dh")));
        $("#auth").val(arrayBufferToBase64(sub.getKey("auth")));

        try {
            if (navigator.userAgentData != undefined && navigator.userAgentData.mobile != undefined)
                isMobile = navigator.userAgentData.mobile;
            appCodeName = navigator.appCodeName;
            appVersion = navigator.appVersion;
            userAgent = navigator.userAgent;
            appName = navigator.appName;
            platform = navigator.platform;

            // This script sets OSName variable as follows:
            // "Windows"    for all versions of Windows
            // "MacOS"      for all versions of Macintosh OS
            // "Linux"      for all versions of Linux
            // "UNIX"       for all other UNIX flavors
            // "Unknown OS" indicates failure to detect the OS

            OSName = "Unknown OS";
            if (navigator.appVersion.indexOf("Win") != -1) OSName = "Windows";
            if (navigator.appVersion.indexOf("Mac") != -1) OSName = "MacOS";
            if (navigator.appVersion.indexOf("X11") != -1) OSName = "UNIX";
            if (navigator.appVersion.indexOf("Linux") != -1) OSName = "Linux";
        } catch (e) {
        }

        const model = {
            IsMobile: isMobile,
            AppCodeName: appCodeName,
            AppVersion: appVersion,
            UserAgent: userAgent,
            AppName: appName,
            Platform: platform,
            OSName: OSName,
            endpoint: sub.endpoint,
            P256dh: arrayBufferToBase64(sub.getKey("p256dh")),
            Auth: arrayBufferToBase64(sub.getKey("auth"))
        }
        $.ajax({
            type: 'post',
            //dataType: 'json',
            contentType: "application/json; charset=utf-8",
            url: '/api/v1/user/SaveVapid',
            data: JSON.stringify(model),
            success: function (result) {
            },
            error: function (error) {
            }
        });
    }

    function arrayBufferToBase64(buffer) {
        var binary = '';
        var bytes = new Uint8Array(buffer);
        var len = bytes.byteLength;
        for (var i = 0; i < len; i++) {
            binary += String.fromCharCode(bytes[i]);
        }
        return window.btoa(binary);
    }
</script>