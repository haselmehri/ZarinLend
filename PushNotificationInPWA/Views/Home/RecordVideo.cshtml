@{
    ViewData["Title"] = "Record Video and Audio";
    Layout = "_CleanLayout";
}
<!-- Optional: some overlay text to describe the video -->
<video autoplay muted playsinline id="videoLive"></video>
<div class="content">
    <h1>Record Video</h1>
    <p>Lorem ipsum...</p>
    <!-- Use a button to pause/play the video with JavaScript -->
    <center>
        <button type="button" id="buttonStart">Start</button>
        <button type="button" id="buttonPause" disabled>Puase</button>
        <button type="button" id="buttonStop" disabled>Stop</button>
    </center>
</div>

<div>
    <video controls playsinline id="videoRecorded"></video>
</div>

@section Styles{
    <style>
        /* Style the video: 100% width and height to cover the entire window */
        #videoLive {
            position: fixed;
            right: 0;
            bottom: 0;
            min-width: 100%;
            min-height: 100%;
        }


        /* Add some content at the bottom of the video/page */
        .content {
            position: fixed;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            color: #f1f1f1;
            width: 100%;
            padding: 20px;
        }


        /* Style the button used to pause/play the video */
        button {
            width: 200px;
            font-size: 18px;
            padding: 10px;
            border: none;
            background: #000;
            color: #fff;
            cursor: pointer;
        }

            button:hover {
                background: #ddd;
                color: black;
            }
    </style>
}
@section Scripts {

    <script>
        async function main() {
            if (!('mediaDevices' in navigator && 'getUserMedia' in navigator.mediaDevices && 'enumerateDevices' in navigator.mediaDevices)) {
                alert("camera not supported by device!");
                return;
            }
            const buttonStart = document.querySelector('#buttonStart');
            const buttonPause = document.querySelector('#buttonPause');
            const buttonStop = document.querySelector('#buttonStop');
            const videoLive = document.querySelector('#videoLive');
            const videoRecorded = document.querySelector('#videoRecorded');
            let isPauseMode = false;

            navigator.mediaDevices.enumerateDevices()
                .then(getVideoInputs)
                .catch(error =>{
                    alert(error);
                });

            const stream = await navigator.mediaDevices.getUserMedia({ // <1>
                video: {
                    //facingMode: {
                    //    exact: 'environment'
                    //}
                },
                audio: true
            });

            videoLive.srcObject = stream;

            if (!MediaRecorder.isTypeSupported('video/webm')) { // <2>
                alert('video/webm is not supported')
            };

            const mediaRecorder = new MediaRecorder(stream, { // <3>
                mimeType: 'video/webm',
            });

            buttonStart.addEventListener('click', () => {
                if (isPauseMode) {
                    mediaRecorder.resume();
                    isPauseMode = false;
                }
                else {
                    mediaRecorder.start(); // <4>
                    isPauseMode = false;
                }
                buttonStart.setAttribute('disabled', '');
                buttonStop.removeAttribute('disabled');
                buttonPause.removeAttribute('disabled');
            });

            buttonPause.addEventListener('click', () => {
                mediaRecorder.pause(); // <4>
                isPauseMode = true;
                buttonPause.setAttribute('disabled', '');
                buttonStop.removeAttribute('disabled');
                buttonStart.removeAttribute('disabled');
            });

            buttonStop.addEventListener('click', () => {
                mediaRecorder.stop(); // <5>
                isPauseMode = false;
                buttonStart.removeAttribute('disabled');
                buttonStop.setAttribute('disabled', '');
                buttonPause.setAttribute('disabled', '');
            });

            mediaRecorder.addEventListener('dataavailable', event => {
                videoRecorded.src = URL.createObjectURL(event.data) // <6>
                debugger;
            });
        }

        function getVideoInputs(mediaDevices) {
            mediaDevices.forEach(mediaDevice => {
                if (mediaDevice.kind === 'videoinput') {
                    //this._webcamList.push(mediaDevice);
                }
            });
        }

        main().then(e => {

        });
    </script>
}