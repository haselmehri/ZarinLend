<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - FCMInPWA</title>
    <link rel="manifest" href="/manifest.json">
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/FCMInPWA.styles.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">FCMInPWA</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            <div id="installAppBox" style="display:none">
                For better experience install app,please :
                <button id="btnInstallApp" type="button">Install App</button>
            </div>
            <div id="giveNotificationAccess" style="display:none;">
                Give access to making notifications :
                <button id="PromptForAccessBtn">Prompt</button>
            </div>
            <div id="NoSupport" style="display:none;">
                Your browser does not support Push Notifications or you have blocked notifications
            </div>
            <form asp-action="Index" id="form" style="display:none;">
                <label for="client">Your name: </label>
                <input id="client" name="client" /><br />

                @*<input id="endpoint" name="endpoint" hidden />
                <input id="p256dh" name="p256dh" hidden />
                <input id="auth" name="auth" hidden />*@

                <button type="submit">Subscribe</button>
            </form>
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2024 - FCMInPWA - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    @*<script type="module">
        // Import the functions you need from the SDKs you need
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.1.0/firebase-app.js";
        import { getMessaging, getToken } from 'https://www.gstatic.com/firebasejs/11.1.0/firebase-messaging.js';
        //import { getAnalytics } from "https://www.gstatic.com/firebasejs/11.1.0/firebase-analytics.js";
        // TODO: Add SDKs for Firebase products that you want to use
        // https://firebase.google.com/docs/web/setup#available-libraries

        // Your web app's Firebase configuration
        // For Firebase JS SDK v7.20.0 and later, measurementId is optional
        const firebaseConfig = {
            apiKey: "AIzaSyAkJV6DCx2cj7e9zuSwnQPHnGFmErxUKYA",
            authDomain: "honar-71e36.firebaseapp.com",
            projectId: "honar-71e36",
            storageBucket: "honar-71e36.firebasestorage.app",
            messagingSenderId: "383995737204",
            appId: "1:383995737204:web:cb46ef5925c00d8e63cd21",
            measurementId: "G-SPEKNZFB6W"
        };

        debugger;
        // Initialize Firebase
        const app = initializeApp(firebaseConfig);
        const messaging = getMessaging(app);
        //const analytics = getAnalytics(app);

        // Initialize Firebase
        //const app1 = firebase.initializeApp(firebaseConfig);
        //const messaging1 = firebase.messaging();

        // Request permission to receive notifications
        //function requestNotificationPermission() {
        //    debugger;
        //    messaging.requestPermission()
        //        .then(function () {
        //            console.log("Notification permission granted.");
        //            return messaging.getToken();
        //        })
        //        .then(function (token) {
        //            console.log("FCM Token:", token);
        //            // Send the token to your server or store it for future use
        //            sendTokenToServer(token);
        //        })
        //        .catch(function (err) {
        //            console.log("Error getting permission or token:", err);
        //        });
        //}

        // Request permission to receive notifications
        async function requestNotificationPermission() {
            try {
                debugger;
                var result = await Notification.requestPermission();
                const token = await getToken(messaging, { vapidKey: 'BNeL-62ri6lipAXxi3CtRxvtWEZTFa8ZLftRoV8aLcW9ObWS5Y9vlLQiiCMoMoJmJUlv8vVvOKdnPmtJQn5raT4' });
                console.log("FCM Token:", token);
                sendTokenToServer(token);
            } catch (err) {
                console.log("Error getting permission or token:", err);
            }

            Notification.requestPermission(function (status) {
                    alert(status);
                    $("#giveNotificationAccess").hide();
                    if (status == "granted") {
                        $("#form").show();
                        debugger;
                        getSubscription(reg);
                    }
                    else if (status == 'denied') {
                        unSubscription(reg);
                    } else {
                        $("#NoSupport").show();
                    }
                });
        }

        // Send the token to your server for later use
        function sendTokenToServer(token) {
            //fetch('/api/fcm/savetoken', {
            //    method: 'POST',
            //    body: JSON.stringify({ token: token }),
            //    headers: { 'Content-Type': 'application/json' }
            //}).then(response => response.json())
            //    .then(data => {
            //        console.log("Token saved:", data);
            //    })
            //    .catch(err => {
            //        console.error("Error saving token:", err);
            //    });

            $.ajax({
                type: 'post',
                dataType: 'json',
                contentType: "application/json; charset=utf-8",
                //processData: false,
                //contentType: false,
                url: '/api/fcm/savetoken',
                data: JSON.stringify({ token: token }),// JSON.stringify(model),
                success: function (result) {

                },
                error: function (error) {
                    alert('خطا در ارسال توکن به سرور-');
                }
            });
        }

        // Call the function to request permission and get the token
        requestNotificationPermission();
    </script>*@
    <script src="~/js/site.js" asp-append-version="true" type="module">               
    </script>
    <script>
        let installPrompt = null;
        const btnInstallApp = $('#btnInstallApp');
        window.addEventListener("beforeinstallprompt", (event) => {
            alert("beforeinstallprompt");
            debugger;
            event.preventDefault();
            installPrompt = event;
            $('#installAppBox').show();
        });

        btnInstallApp.on('click', async (event) => {
            event.preventDefault();
            alert("install app button click");
            if (!installPrompt) {
                return;
            }
            const result = await installPrompt.prompt();
            console.log(`Install prompt was: ${result.outcome}`);
            disableInAppInstallPrompt();
        });

        window.addEventListener("appinstalled", () => {
            alert("appinstalled");
            disableInAppInstallPrompt();
        });

        function disableInAppInstallPrompt() {
            installPrompt = null;
            $('#installAppBox').hide();
        }
    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
