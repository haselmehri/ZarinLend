// <auto-generated />
using System;
using Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ZarinLend.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.AyandehSignRequestSignatureLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Curl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MethodType")
                        .HasColumnType("int");

                    b.Property<int>("RequestFacilityId")
                        .HasColumnType("int");

                    b.Property<string>("ResponseMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TrackId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("RequestFacilityId");

                    b.ToTable("AyandehSignRequestSignatureLogs", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Bank", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Banks", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Business.Payment.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IpgType")
                        .HasColumnType("int");

                    b.Property<bool?>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Payments", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Core.Entities.Business.Payment.PaymentInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BuyerMobile")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IpgType")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("Otp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SellerId");

                    b.ToTable("PaymentInfos", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Business.Payment.PaymentReason", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<Guid?>("PaymentInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("RequestFacilityGuarantorId")
                        .HasColumnType("int");

                    b.Property<int?>("RequestFacilityId")
                        .HasColumnType("int");

                    b.Property<int?>("RequestFacilityInstallmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PaymentInfoId");

                    b.HasIndex("RequestFacilityGuarantorId");

                    b.HasIndex("RequestFacilityId");

                    b.HasIndex("RequestFacilityInstallmentId");

                    b.ToTable("PaymentReasons", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.ApplicantValidationResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("BlackListInquiry")
                        .HasColumnType("bit");

                    b.Property<bool?>("CivilRegistryInquiry")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("FacilityInquiry")
                        .HasColumnType("bit");

                    b.Property<bool?>("MilitaryInquiry")
                        .HasColumnType("bit");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<bool?>("PostalCodeInquiry")
                        .HasColumnType("bit");

                    b.Property<int>("RequestFacilityId")
                        .HasColumnType("int");

                    b.Property<bool?>("ReturnedCheckInquiry")
                        .HasColumnType("bit");

                    b.Property<bool?>("SecurityCouncilSanctionsInquiry")
                        .HasColumnType("bit");

                    b.Property<bool?>("ShahkarInquiry")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RequestFacilityId");

                    b.ToTable("ApplicantValidationResults", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RejectionReason", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("RejectionReasons", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RequestFacility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<long?>("ApprovedAmount")
                        .HasColumnType("bigint");

                    b.Property<bool>("AwaitingIntroductionGuarantor")
                        .HasColumnType("bit");

                    b.Property<string>("AyandehSignSigningToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AyandehSignSigningTokenForAdminBank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CancelByUser")
                        .HasColumnType("bit");

                    b.Property<string>("Certificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractFileName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<DateTime?>("DepositDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepositDocumentFileName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DepositDocumentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Digest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DoneFacility")
                        .HasColumnType("bit");

                    b.Property<string>("FacilityNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("FacilityTypeId")
                        .HasColumnType("int");

                    b.Property<long?>("FeeAmount")
                        .HasColumnType("bigint");

                    b.Property<int>("GlobalSettingId")
                        .HasColumnType("int");

                    b.Property<bool>("GuarantorIsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("IranCreditScoringResultRuleId")
                        .HasColumnType("int");

                    b.Property<Guid?>("OperatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("PlanMemberId")
                        .HasColumnType("int");

                    b.Property<string>("PoliceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignedContractByBankFileName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SignedContractByUserFileName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("SigningMethod")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UsagePlaceDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserOption")
                        .HasColumnType("int");

                    b.Property<bool?>("ValidationMustBeRepeated")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("FacilityTypeId");

                    b.HasIndex("GlobalSettingId");

                    b.HasIndex("IranCreditScoringResultRuleId");

                    b.HasIndex("OperatorId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PlanMemberId");

                    b.ToTable("RequestFacilities", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RequestFacilityCardIssuance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Cvv")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ExpireMonth")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("ExpireYear")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<int>("RequestFacilityId")
                        .HasColumnType("int");

                    b.Property<string>("SecondPassword")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RequestFacilityId")
                        .IsUnique();

                    b.ToTable("RequestFacilityCardIssuances", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RequestFacilityError", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<int>("RequestFacilityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkFlowStepErrorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestFacilityId");

                    b.HasIndex("WorkFlowStepErrorId");

                    b.ToTable("RequestFacilityErrors", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RequestFacilityGuarantor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("ApproverUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CancelByUser")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("GuarantorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IranCreditScoringResultRuleId")
                        .HasColumnType("int");

                    b.Property<bool>("IsConfirm")
                        .HasColumnType("bit");

                    b.Property<int>("RequestFacilityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApproverUserId");

                    b.HasIndex("GuarantorUserId");

                    b.HasIndex("IranCreditScoringResultRuleId");

                    b.HasIndex("RequestFacilityId");

                    b.ToTable("RequestFacilityGuarantors", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RequestFacilityGuarantorWarranty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DocumentType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(100);

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<int>("RequestFacilityGuarantorId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<short>("Version")
                        .HasColumnType("smallint");

                    b.Property<long>("WarantyAmount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("WarantyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RequestFacilityGuarantorId")
                        .IsUnique();

                    b.ToTable("RequestFacilityGuarantorWarranties", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RequestFacilityGuarantorWorkFlowStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<Guid>("OpratorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RequestFacilityGuarantorId")
                        .HasColumnType("int");

                    b.Property<string>("StatusDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<short?>("StatusId")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkFlowStepId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OpratorId");

                    b.HasIndex("RequestFacilityGuarantorId");

                    b.HasIndex("StatusId");

                    b.HasIndex("WorkFlowStepId");

                    b.ToTable("RequestFacilityGuarantorWorkFlowSteps", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RequestFacilityInstallment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Paid")
                        .HasColumnType("bit");

                    b.Property<long?>("PenaltyAmount")
                        .HasColumnType("bigint");

                    b.Property<int?>("PenaltyDays")
                        .HasColumnType("int");

                    b.Property<long?>("RealPayAmount")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RealPayDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestFacilityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartForPayment")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RequestFacilityId");

                    b.ToTable("RequestFacilityInstallments", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RequestFacilityInsuranceIssuance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("InsuranceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RequestFacilityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("RequestFacilityId");

                    b.ToTable("RequestFacilityInsuranceIssuances", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RequestFacilityInsuranceIssuanceDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<int>("RequestFacilityInsuranceIssuanceId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<short>("Version")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("RequestFacilityInsuranceIssuanceId");

                    b.ToTable("RequestFacilityInsuranceIssuanceDocuments", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RequestFacilityPromissory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("Application")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CallbackUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DuDate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("IssuerAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IssuerIban")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IssuerIdCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IssuerIdType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IssuerMobile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IssuerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("IssuerPostalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("LetSignerDownload")
                        .HasColumnType("bit");

                    b.Property<string>("MultiSignedPdf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentPlace")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PromissoryId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ReceiverBirthDate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReceiverIdCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReceiverIdType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReceiverMobile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RequestFacilityId")
                        .HasColumnType("int");

                    b.Property<string>("RequestId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("SigningStatus")
                        .HasColumnType("int");

                    b.Property<string>("SigningTrackId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TrackId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Transferable")
                        .HasColumnType("bit");

                    b.Property<string>("UnSignedPdf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RequestFacilityId");

                    b.ToTable("RequestFacilityPromissories", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RequestFacilityWarranty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DocumentType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(100);

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<int>("RequestFacilityId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<short>("Version")
                        .HasColumnType("smallint");

                    b.Property<long>("WarantyAmount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("WarantyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RequestFacilityId");

                    b.ToTable("RequestFacilityWarranties", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RequestFacilityWorkFlowStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<Guid>("OpratorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RequestFacilityId")
                        .HasColumnType("int");

                    b.Property<string>("StatusDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<short?>("StatusId")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkFlowStepId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OpratorId");

                    b.HasIndex("RequestFacilityId");

                    b.HasIndex("StatusId");

                    b.HasIndex("WorkFlowStepId");

                    b.ToTable("RequestFacilityWorkFlowSteps", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RequestFacilityWorkFlowStepWorkFlowStepRejectionReason", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("RequestFacilityWorkFlowStepId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkFlowStepRejectionReasonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestFacilityWorkFlowStepId");

                    b.HasIndex("WorkFlowStepRejectionReasonId");

                    b.ToTable("RequestFacilityWorkFlowStepWorkFlowStepRejectionReasons", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RequestFaciliyUsagePlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("RequestFacilityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsagePlaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestFacilityId");

                    b.HasIndex("UsagePlaceId");

                    b.ToTable("RequestFaciliyUsagePlaces", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Business.Transaction.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Business.Transaction.TransactionReason", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<long?>("PaymentId")
                        .HasColumnType("bigint");

                    b.Property<int?>("RequestFacilityGuarantorId")
                        .HasColumnType("int");

                    b.Property<int?>("RequestFacilityId")
                        .HasColumnType("int");

                    b.Property<int?>("RequestFacilityInstallmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId")
                        .IsUnique()
                        .HasFilter("[PaymentId] IS NOT NULL");

                    b.HasIndex("RequestFacilityGuarantorId");

                    b.HasIndex("RequestFacilityId");

                    b.HasIndex("RequestFacilityInstallmentId");

                    b.ToTable("TransactionReasons", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Business.Transaction.WalletTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<int?>("RequestFacilityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WalletTransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ParentId")
                        .IsUnique()
                        .HasFilter("[ParentId] IS NOT NULL");

                    b.HasIndex("RequestFacilityId")
                        .IsUnique()
                        .HasFilter("[RequestFacilityId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("WalletTransactions", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Countries", (string)null);
                });

            modelBuilder.Entity("Core.Entities.FacilityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long>("Fee")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("MonthCount")
                        .HasColumnType("int");

                    b.Property<string>("MonthCountTitle")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("FacilityTypes", (string)null);
                });

            modelBuilder.Entity("Core.Entities.FinotechLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Curl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MethodType")
                        .HasColumnType("int");

                    b.Property<Guid?>("OpratorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("RequestFacilityId")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TrackId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("OpratorId");

                    b.HasIndex("RequestFacilityId");

                    b.ToTable("FinotechLogs", (string)null);
                });

            modelBuilder.Entity("Core.Entities.GlobalSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("FacilityInterest")
                        .HasColumnType("float");

                    b.Property<double>("FinancialInstitutionFacilityFee")
                        .HasColumnType("float");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double>("LendTechFacilityFee")
                        .HasColumnType("float");

                    b.Property<double>("LendTechFacilityForZarinpalClientFee")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("ValidationFee")
                        .HasColumnType("bigint");

                    b.Property<int>("ValidityPeriodOfValidation")
                        .HasColumnType("int");

                    b.Property<double>("WarantyPercentage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("GlobalSettings", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("GlobalSettingId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("WalletTransactionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("GlobalSettingId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SellerId");

                    b.HasIndex("WalletTransactionId");

                    b.ToTable("Invoices", (string)null);
                });

            modelBuilder.Entity("Core.Entities.InvoiceDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<short>("Version")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceDocuments", (string)null);
                });

            modelBuilder.Entity("Core.Entities.IranCreditScoring", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("RequestFacilityGuarantorId")
                        .HasColumnType("int");

                    b.Property<int?>("RequestFacilityId")
                        .HasColumnType("int");

                    b.Property<string>("Risk")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("RequestFacilityGuarantorId");

                    b.HasIndex("RequestFacilityId");

                    b.ToTable("IranCreditScorings", (string)null);
                });

            modelBuilder.Entity("Core.Entities.IranCreditScoringDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<int>("IranCreditScoringId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<short>("Version")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("IranCreditScoringId");

                    b.ToTable("IranCreditScoringDocuments", (string)null);
                });

            modelBuilder.Entity("Core.Entities.IranCreditScoringResultRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("GuarantorIsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("IranCreditScoringResultRuleType")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("MaximumAmount")
                        .HasColumnType("bigint");

                    b.Property<long?>("MinimumAmount")
                        .HasColumnType("bigint");

                    b.Property<string>("Risk")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("IranCreditScoringResultRules", (string)null);
                });

            modelBuilder.Entity("Core.Entities.JobTitle", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("JobTitles", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("LocationType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Locations", (string)null);
                });

            modelBuilder.Entity("Core.Entities.NeginHubLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Curl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MethodType")
                        .HasColumnType("int");

                    b.Property<Guid?>("OpratorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TrackId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("OpratorId");

                    b.ToTable("NeginHubLogs", (string)null);
                });

            modelBuilder.Entity("Core.Entities.NeoZarinCallBackSignatureLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiveTrackId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestFacilityId")
                        .HasColumnType("int");

                    b.Property<string>("SendTrackId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("NeoZarinCallBackSignatureLogs", (string)null);
                });

            modelBuilder.Entity("Core.Entities.NeoZarinRequestSignatureLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CleanTextParam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestFacilityId")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("RequestFacilityId");

                    b.HasIndex("TrackId")
                        .IsUnique()
                        .HasFilter("[TrackId] IS NOT NULL");

                    b.ToTable("NeoZarinRequestSignatureLogs", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long>("NationalId")
                        .HasColumnType("bigint");

                    b.Property<short>("OrganizationTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("SiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NationalId")
                        .IsUnique();

                    b.HasIndex("OrganizationTypeId");

                    b.ToTable("Organizations", (string)null);
                });

            modelBuilder.Entity("Core.Entities.OrganizationType", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OrganizationTypes", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("CustomerNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("GetIdentityDataFromCivilRegistryData")
                        .HasColumnType("bit");

                    b.Property<string>("HashCardNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IdentificationSeri")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("IdentificationSerial")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsAddressValidated")
                        .HasColumnType("bit");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("MobileConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("MobileShahkarConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("PlaceOfBirth")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("SSID")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SanaTrackingId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerifiedAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("VerifiedPostalCode")
                        .HasColumnType("bit");

                    b.Property<long?>("ZP_Id")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("Mobile")
                        .IsUnique();

                    b.HasIndex("NationalCode")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ZP_Id")
                        .IsUnique()
                        .HasFilter("[ZP_Id] IS NOT NULL");

                    b.ToTable("People", (string)null);
                });

            modelBuilder.Entity("Core.Entities.PersonJobInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("JobTitleId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SalaryRangeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("JobTitleId");

                    b.HasIndex("PersonId");

                    b.HasIndex("SalaryRangeId");

                    b.ToTable("PersonJobInfos", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("AmountWaranty")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long?>("FacilityAmount")
                        .HasColumnType("bigint");

                    b.Property<int>("FacilityTypeId")
                        .HasColumnType("int");

                    b.Property<int>("GlobalSettingId")
                        .HasColumnType("int");

                    b.Property<bool?>("ImportDone")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FacilityTypeId");

                    b.HasIndex("GlobalSettingId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Plans", (string)null);
                });

            modelBuilder.Entity("Core.Entities.PlanFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<short>("Version")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("PlanFiles", (string)null);
                });

            modelBuilder.Entity("Core.Entities.PlanMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("AddressCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressProvince")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValue("");

                    b.Property<string>("BirthCertificateSerial")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BirthLocationCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BirthLocationId")
                        .HasColumnType("int");

                    b.Property<string>("BirthLocationProvince")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasDefaultValue("");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CityOfIssueId")
                        .HasColumnType("int");

                    b.Property<string>("CityOfIssueName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("CustomerNumber")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasDefaultValue("");

                    b.Property<string>("DepositOwners")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasDefaultValue("");

                    b.Property<string>("DepositStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("FacilityAmount")
                        .HasColumnType("bigint");

                    b.Property<string>("FatherName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("GenderText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasError")
                        .HasColumnType("bit");

                    b.Property<string>("IBAN")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.Property<bool?>("ImportSuccess")
                        .HasColumnType("bit");

                    b.Property<string>("LName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ProvinceOfIssue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SSID")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BirthLocationId");

                    b.HasIndex("CityId");

                    b.HasIndex("CityOfIssueId");

                    b.HasIndex("PlanId");

                    b.HasIndex("UserId");

                    b.ToTable("PlanMembers", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Core.Entities.SalaryRange", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SalaryRanges", (string)null);
                });

            modelBuilder.Entity("Core.Entities.SamatBackChequeDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BackDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SamatBackChequeHeaderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SamatBackChequeHeaderId");

                    b.ToTable("SamatBackChequeDetails", (string)null);
                });

            modelBuilder.Entity("Core.Entities.SamatBackChequeHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestFacilityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("RequestFacilityId");

                    b.ToTable("SamatBackChequeHeaders", (string)null);
                });

            modelBuilder.Entity("Core.Entities.SamatFacilityDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BranchDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<decimal>("FacilityAmountOrginal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FacilityBankCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("FacilityBenefitAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FacilityBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityBranchCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("FacilityDebtorTotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FacilityDeferredAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FacilityEndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("FacilityPastExpiredAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FacilitySetDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("FacilitySuspiciousAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SamatFacilityHeaderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SamatFacilityHeaderId");

                    b.ToTable("SamatFacilityDetails", (string)null);
                });

            modelBuilder.Entity("Core.Entities.SamatFacilityHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("FacilityDebtTotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FacilityDeferredTotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FacilityPastExpiredTotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FacilitySuspiciousTotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FacilityTotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestFacilityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("RequestFacilityId");

                    b.ToTable("SamatFacilityHeaders", (string)null);
                });

            modelBuilder.Entity("Core.Entities.SmsVerification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<DateTime>("ExpireTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<string>("MessageTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Receptor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReceptorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReturnCode")
                        .HasColumnType("int");

                    b.Property<string>("ReturnMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StatusText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerficationCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceptorId");

                    b.HasIndex("SenderId");

                    b.ToTable("SmsVerifications", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Status", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Statuses", (string)null);
                });

            modelBuilder.Entity("Core.Entities.UsagePlace", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UsagePlaces", (string)null);
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Otp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("OtpExpireTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OtpStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Core.Entities.UserBankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Deposit")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("DepositOwner")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DepositStatus")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IBAN")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("nvarchar(26)");

                    b.Property<bool>("IsConfirm")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CardNumber")
                        .IsUnique()
                        .HasFilter("[CardNumber] IS NOT NULL");

                    b.HasIndex("IBAN")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserBankAccounts", (string)null);
                });

            modelBuilder.Entity("Core.Entities.UserIdentityDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BankId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("DocumentType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(100);

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("Version")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("UserId");

                    b.ToTable("UserIdentityDocuments", (string)null);
                });

            modelBuilder.Entity("Core.Entities.UserInbox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SeenDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.HasIndex("UserId");

                    b.ToTable("UserInboxes", (string)null);
                });

            modelBuilder.Entity("Core.Entities.UserNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("IconUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SeenDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserVapidId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.HasIndex("UserVapidId");

                    b.ToTable("UserNotifications", (string)null);
                });

            modelBuilder.Entity("Core.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Core.Entities.UserSms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Mobile")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SmsStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSms", (string)null);
                });

            modelBuilder.Entity("Core.Entities.UserVAPID", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppCodeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Auth")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMobile")
                        .HasColumnType("bit");

                    b.Property<string>("OsName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("P256dh")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Platform")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserVAPIDS", (string)null);
                });

            modelBuilder.Entity("Core.Entities.VerifyResultExcel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApprovedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("RejectedCount")
                        .HasColumnType("int");

                    b.Property<int>("RowCount")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UnknownCount")
                        .HasColumnType("int");

                    b.Property<short>("Version")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("VerifyResultExcels", (string)null);
                });

            modelBuilder.Entity("Core.Entities.VerifyResultExcelDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("BlackListInquiry")
                        .HasColumnType("bit");

                    b.Property<bool?>("CivilRegistryInquiry")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("FacilityInquiry")
                        .HasColumnType("bit");

                    b.Property<bool?>("FinalResult")
                        .HasColumnType("bit");

                    b.Property<bool?>("MilitaryInquiry")
                        .HasColumnType("bit");

                    b.Property<bool?>("PostalCodeInquiry")
                        .HasColumnType("bit");

                    b.Property<int?>("RequestFacilityId")
                        .HasColumnType("int");

                    b.Property<bool?>("ReturnedCheckInquiry")
                        .HasColumnType("bit");

                    b.Property<bool?>("SecurityCouncilSanctionsInquiry")
                        .HasColumnType("bit");

                    b.Property<bool?>("ShahkarInquiry")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VerifyResultExcelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("RequestFacilityId");

                    b.HasIndex("VerifyResultExcelId");

                    b.ToTable("VerifyResultExcelDetails", (string)null);
                });

            modelBuilder.Entity("Core.Entities.WorkFlow", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("WorkFlows", (string)null);
                });

            modelBuilder.Entity("Core.Entities.WorkFlowDefaultError", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("ErrorField")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WorkFlowDefaultErrors", (string)null);
                });

            modelBuilder.Entity("Core.Entities.WorkFlowForm", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkFlowForms", (string)null);
                });

            modelBuilder.Entity("Core.Entities.WorkFlowStep", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("ApproveNextStepId")
                        .HasColumnType("int");

                    b.Property<bool>("CanBeIncomplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("ConditionalOrOptionalCorrectionStep")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsApproveFinalStep")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFirstStep")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLastStep")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("RejectNextStepId")
                        .HasColumnType("int");

                    b.Property<int?>("ReturnToCorrectionNextStepId")
                        .HasColumnType("int");

                    b.Property<bool>("StepIsManual")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WorkFlowFormId")
                        .HasColumnType("int");

                    b.Property<int>("WorkFlowId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApproveNextStepId");

                    b.HasIndex("RejectNextStepId");

                    b.HasIndex("ReturnToCorrectionNextStepId");

                    b.HasIndex("WorkFlowFormId");

                    b.HasIndex("WorkFlowId");

                    b.ToTable("WorkFlowSteps", (string)null);
                });

            modelBuilder.Entity("Core.Entities.WorkFlowStepCorrection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("CurrentStepId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ReturnToCorrectionNextStepId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkFlowFormId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrentStepId");

                    b.HasIndex("ReturnToCorrectionNextStepId");

                    b.HasIndex("WorkFlowFormId");

                    b.ToTable("WorkFlowStepCorrections", (string)null);
                });

            modelBuilder.Entity("Core.Entities.WorkFlowStepError", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkFlowDefaultErrorId")
                        .HasColumnType("int");

                    b.Property<int>("WorkFlowStepId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkFlowDefaultErrorId");

                    b.HasIndex("WorkFlowStepId");

                    b.ToTable("WorkFlowStepErrors", (string)null);
                });

            modelBuilder.Entity("Core.Entities.WorkFlowStepRejectionReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("RejectionReasonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkFlowStepId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RejectionReasonId");

                    b.HasIndex("WorkFlowStepId");

                    b.ToTable("WorkFlowStepRejectionReasons", (string)null);
                });

            modelBuilder.Entity("Core.Entities.WorkFlowStepRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkFlowStepId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("WorkFlowStepId");

                    b.ToTable("WorkFlowStepRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Business.Payment.SamanInternetPayment", b =>
                {
                    b.HasBaseType("Core.Entities.Business.Payment.Payment");

                    b.Property<string>("CardNumberForPayment")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("HashCardNumberForPayment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("HashedCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MethodName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RRN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefNum")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ResNum")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ResultCode")
                        .HasColumnType("int");

                    b.Property<string>("ResultDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ReturnAmount")
                        .HasColumnType("bigint");

                    b.Property<string>("SecurePan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TerminalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TraceNo")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("TransactionDetail_AffectiveAmount")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionDetail_HashedPan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionDetail_MaskedPan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TransactionDetail_OrginalAmount")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionDetail_RRN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionDetail_RefNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionDetail_StraceDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionDetail_StraceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TransactionDetail_TerminalNumber")
                        .HasColumnType("int");

                    b.Property<int?>("Wage")
                        .HasColumnType("int");

                    b.HasIndex("ResNum")
                        .IsUnique()
                        .HasFilter("[ResNum] IS NOT NULL");

                    b.ToTable("SamanInternetPayments", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Business.Payment.ZarinPalInternetPayment", b =>
                {
                    b.HasBaseType("Core.Entities.Business.Payment.Payment");

                    b.Property<string>("Authority")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Card_Hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Card_Pan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Errors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Fee")
                        .HasColumnType("int");

                    b.Property<string>("Fee_Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Merchant_Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ref_Id")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasIndex("Authority")
                        .IsUnique()
                        .HasFilter("[Authority] IS NOT NULL");

                    b.ToTable("ZarinPalInternetPayments", (string)null);
                });

            modelBuilder.Entity("Core.Entities.AyandehSignRequestSignatureLog", b =>
                {
                    b.HasOne("Core.Entities.User", "Creator")
                        .WithMany("AyandehSignRequestSignatureLogCreators")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Business.RequestFacility.RequestFacility", "RequestFacility")
                        .WithMany("AyandehSignRequestSignatureLogs")
                        .HasForeignKey("RequestFacilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("RequestFacility");
                });

            modelBuilder.Entity("Core.Entities.Business.Payment.Payment", b =>
                {
                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.Business.Payment.PaymentInfo", b =>
                {
                    b.HasOne("Core.Entities.User", "Buyer")
                        .WithMany("BuyerPaymentInfos")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "Creator")
                        .WithMany("CreatorPaymentInfos")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Organization", "Organization")
                        .WithMany("PaymentInfos")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "Seller")
                        .WithMany("SellerPaymentInfos")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Creator");

                    b.Navigation("Organization");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Core.Entities.Business.Payment.PaymentReason", b =>
                {
                    b.HasOne("Core.Entities.Business.Payment.Payment", "Payment")
                        .WithOne("PaymentReason")
                        .HasForeignKey("Core.Entities.Business.Payment.PaymentReason", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Business.Payment.PaymentInfo", "PaymentInfo")
                        .WithMany("PaymentReasons")
                        .HasForeignKey("PaymentInfoId");

                    b.HasOne("Core.Entities.Business.RequestFacility.RequestFacilityGuarantor", "RequestFacilityGuarantor")
                        .WithMany("PaymentReasons")
                        .HasForeignKey("RequestFacilityGuarantorId");

                    b.HasOne("Core.Entities.Business.RequestFacility.RequestFacility", "RequestFacility")
                        .WithMany("PaymentReasons")
                        .HasForeignKey("RequestFacilityId");

                    b.HasOne("Core.Entities.Business.RequestFacility.RequestFacilityInstallment", "RequestFacilityInstallment")
                        .WithMany("PaymentReasons")
                        .HasForeignKey("RequestFacilityInstallmentId");

                    b.Navigation("Payment");

                    b.Navigation("PaymentInfo");

                    b.Navigation("RequestFacility");

                    b.Navigation("RequestFacilityGuarantor");

                    b.Navigation("RequestFacilityInstallment");
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.ApplicantValidationResult", b =>
                {
                    b.HasOne("Core.Entities.User", "Creator")
                        .WithMany("ApplicantValidationResults")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Organization", "Organization")
                        .WithMany("ApplicantValidationResults")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Business.RequestFacility.RequestFacility", "RequestFacility")
                        .WithMany("ApplicantValidationResults")
                        .HasForeignKey("RequestFacilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Organization");

                    b.Navigation("RequestFacility");
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RequestFacility", b =>
                {
                    b.HasOne("Core.Entities.User", "Buyer")
                        .WithMany("RequestFacilityBuyers")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.FacilityType", "FacilityType")
                        .WithMany("RequestFacilities")
                        .HasForeignKey("FacilityTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.GlobalSetting", "GlobalSetting")
                        .WithMany("RequestFacilities")
                        .HasForeignKey("GlobalSettingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.IranCreditScoringResultRule", "IranCreditScoringResultRule")
                        .WithMany("RequestFacilities")
                        .HasForeignKey("IranCreditScoringResultRuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "Operator")
                        .WithMany("OperatorRequestFacilities")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Organization", "Organization")
                        .WithMany("OrganizationRequestFacilities")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Core.Entities.PlanMember", "PlanMember")
                        .WithMany("RequestFacilities")
                        .HasForeignKey("PlanMemberId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Buyer");

                    b.Navigation("FacilityType");

                    b.Navigation("GlobalSetting");

                    b.Navigation("IranCreditScoringResultRule");

                    b.Navigation("Operator");

                    b.Navigation("Organization");

                    b.Navigation("PlanMember");
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RequestFacilityCardIssuance", b =>
                {
                    b.HasOne("Core.Entities.Business.RequestFacility.RequestFacility", "RequestFacility")
                        .WithOne("RequestFacilityCardIssuance")
                        .HasForeignKey("Core.Entities.Business.RequestFacility.RequestFacilityCardIssuance", "RequestFacilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RequestFacility");
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RequestFacilityError", b =>
                {
                    b.HasOne("Core.Entities.Business.RequestFacility.RequestFacility", "RequestFacility")
                        .WithMany("RequestFacilityErrors")
                        .HasForeignKey("RequestFacilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.WorkFlowStepError", "WorkFlowStepError")
                        .WithMany("RequestFacilityErrors")
                        .HasForeignKey("WorkFlowStepErrorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RequestFacility");

                    b.Navigation("WorkFlowStepError");
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RequestFacilityGuarantor", b =>
                {
                    b.HasOne("Core.Entities.User", "Approver")
                        .WithMany("ApproverRequestFacilityGuarantors")
                        .HasForeignKey("ApproverUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.User", "Guarantor")
                        .WithMany("RequestFacilityGuarantors")
                        .HasForeignKey("GuarantorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.IranCreditScoringResultRule", "IranCreditScoringResultRule")
                        .WithMany("RequestFacilityGuarantors")
                        .HasForeignKey("IranCreditScoringResultRuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Business.RequestFacility.RequestFacility", "RequestFacility")
                        .WithMany("RequestFacilityGuarantors")
                        .HasForeignKey("RequestFacilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Guarantor");

                    b.Navigation("IranCreditScoringResultRule");

                    b.Navigation("RequestFacility");
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RequestFacilityGuarantorWarranty", b =>
                {
                    b.HasOne("Core.Entities.Business.RequestFacility.RequestFacilityGuarantor", "RequestFacilityGuarantor")
                        .WithOne("RequestFacilityGuarantorWarranty")
                        .HasForeignKey("Core.Entities.Business.RequestFacility.RequestFacilityGuarantorWarranty", "RequestFacilityGuarantorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RequestFacilityGuarantor");
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RequestFacilityGuarantorWorkFlowStep", b =>
                {
                    b.HasOne("Core.Entities.User", "Oprator")
                        .WithMany("RequestFacilityGuarantorWorkFlowSteps")
                        .HasForeignKey("OpratorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Business.RequestFacility.RequestFacilityGuarantor", "RequestFacilityGuarantor")
                        .WithMany("RequestFacilityGuarantorWorkFlowSteps")
                        .HasForeignKey("RequestFacilityGuarantorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Status", "Status")
                        .WithMany("RequestFacilityGuarantorWorkFlowSteps")
                        .HasForeignKey("StatusId");

                    b.HasOne("Core.Entities.WorkFlowStep", "WorkFlowStep")
                        .WithMany("RequestFacilityGuarantorWorkFlowSteps")
                        .HasForeignKey("WorkFlowStepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Oprator");

                    b.Navigation("RequestFacilityGuarantor");

                    b.Navigation("Status");

                    b.Navigation("WorkFlowStep");
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RequestFacilityInstallment", b =>
                {
                    b.HasOne("Core.Entities.Business.RequestFacility.RequestFacility", "RequestFacility")
                        .WithMany("RequestFacilityInstallments")
                        .HasForeignKey("RequestFacilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RequestFacility");
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RequestFacilityInsuranceIssuance", b =>
                {
                    b.HasOne("Core.Entities.User", "Creator")
                        .WithMany("RequestFacilityInsuranceIssuances")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Business.RequestFacility.RequestFacility", "RequestFacility")
                        .WithMany("RequestFacilityInsuranceIssuances")
                        .HasForeignKey("RequestFacilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("RequestFacility");
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RequestFacilityInsuranceIssuanceDocument", b =>
                {
                    b.HasOne("Core.Entities.Business.RequestFacility.RequestFacilityInsuranceIssuance", "RequestFacilityInsuranceIssuance")
                        .WithMany("RequestFacilityInsuranceIssuanceDocuments")
                        .HasForeignKey("RequestFacilityInsuranceIssuanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RequestFacilityInsuranceIssuance");
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RequestFacilityPromissory", b =>
                {
                    b.HasOne("Core.Entities.Business.RequestFacility.RequestFacility", "RequestFacility")
                        .WithMany("RequestFacilityPromissories")
                        .HasForeignKey("RequestFacilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RequestFacility");
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RequestFacilityWarranty", b =>
                {
                    b.HasOne("Core.Entities.Business.RequestFacility.RequestFacility", "RequestFacility")
                        .WithMany("RequestFacilityWarranties")
                        .HasForeignKey("RequestFacilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RequestFacility");
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RequestFacilityWorkFlowStep", b =>
                {
                    b.HasOne("Core.Entities.User", "Oprator")
                        .WithMany("RequestFacilityWorkFlowSteps")
                        .HasForeignKey("OpratorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Business.RequestFacility.RequestFacility", "RequestFacility")
                        .WithMany("RequestFacilityWorkFlowSteps")
                        .HasForeignKey("RequestFacilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Status", "Status")
                        .WithMany("RequestFacilityWorkFlowSteps")
                        .HasForeignKey("StatusId");

                    b.HasOne("Core.Entities.WorkFlowStep", "WorkFlowStep")
                        .WithMany("RequestFacilityWorkFlowSteps")
                        .HasForeignKey("WorkFlowStepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Oprator");

                    b.Navigation("RequestFacility");

                    b.Navigation("Status");

                    b.Navigation("WorkFlowStep");
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RequestFacilityWorkFlowStepWorkFlowStepRejectionReason", b =>
                {
                    b.HasOne("Core.Entities.Business.RequestFacility.RequestFacilityWorkFlowStep", "RequestFacilityWorkFlowStep")
                        .WithMany("RequestFacilityWorkFlowStepWorkFlowStepRejectionReasons")
                        .HasForeignKey("RequestFacilityWorkFlowStepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.WorkFlowStepRejectionReason", "WorkFlowStepRejectionReason")
                        .WithMany("RequestFacilityWorkFlowStepWorkFlowStepRejectionReasons")
                        .HasForeignKey("WorkFlowStepRejectionReasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RequestFacilityWorkFlowStep");

                    b.Navigation("WorkFlowStepRejectionReason");
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RequestFaciliyUsagePlace", b =>
                {
                    b.HasOne("Core.Entities.Business.RequestFacility.RequestFacility", "RequestFacility")
                        .WithMany("RequestFaciliyUsagePlaces")
                        .HasForeignKey("RequestFacilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.UsagePlace", "UsagePlace")
                        .WithMany("RequestFaciliyUsagePlaces")
                        .HasForeignKey("UsagePlaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RequestFacility");

                    b.Navigation("UsagePlace");
                });

            modelBuilder.Entity("Core.Entities.Business.Transaction.Transaction", b =>
                {
                    b.HasOne("Core.Entities.User", "Creator")
                        .WithMany("CreatorTransactions")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Organization", "Organization")
                        .WithMany("Transactions")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.User", "Person")
                        .WithMany("PersonTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Organization");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Core.Entities.Business.Transaction.TransactionReason", b =>
                {
                    b.HasOne("Core.Entities.Business.Transaction.Transaction", "Transaction")
                        .WithOne("TransactionReason")
                        .HasForeignKey("Core.Entities.Business.Transaction.TransactionReason", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Business.Payment.Payment", "Payment")
                        .WithOne("TransactionReason")
                        .HasForeignKey("Core.Entities.Business.Transaction.TransactionReason", "PaymentId");

                    b.HasOne("Core.Entities.Business.RequestFacility.RequestFacilityGuarantor", "RequestFacilityGuarantor")
                        .WithMany("TransactionReasons")
                        .HasForeignKey("RequestFacilityGuarantorId");

                    b.HasOne("Core.Entities.Business.RequestFacility.RequestFacility", "RequestFacility")
                        .WithMany("TransactionReasons")
                        .HasForeignKey("RequestFacilityId");

                    b.HasOne("Core.Entities.Business.RequestFacility.RequestFacilityInstallment", "RequestFacilityInstallment")
                        .WithMany("TransactionReasons")
                        .HasForeignKey("RequestFacilityInstallmentId");

                    b.Navigation("Payment");

                    b.Navigation("RequestFacility");

                    b.Navigation("RequestFacilityGuarantor");

                    b.Navigation("RequestFacilityInstallment");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Core.Entities.Business.Transaction.WalletTransaction", b =>
                {
                    b.HasOne("Core.Entities.User", "Creator")
                        .WithMany("CreatorWalletTransactions")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Organization", "Organization")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Business.Transaction.WalletTransaction", "Parent")
                        .WithOne("Child")
                        .HasForeignKey("Core.Entities.Business.Transaction.WalletTransaction", "ParentId");

                    b.HasOne("Core.Entities.Business.RequestFacility.RequestFacility", "RequestFacility")
                        .WithOne("WalletTransaction")
                        .HasForeignKey("Core.Entities.Business.Transaction.WalletTransaction", "RequestFacilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("PersonWalletTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Organization");

                    b.Navigation("Parent");

                    b.Navigation("RequestFacility");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.FacilityType", b =>
                {
                    b.HasOne("Core.Entities.Organization", "Organization")
                        .WithMany("FacilityTypes")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Core.Entities.FinotechLog", b =>
                {
                    b.HasOne("Core.Entities.User", "Oprator")
                        .WithMany("FinotechLogs")
                        .HasForeignKey("OpratorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Business.RequestFacility.RequestFacility", "RequestFacility")
                        .WithMany("FinotechLogs")
                        .HasForeignKey("RequestFacilityId");

                    b.Navigation("Oprator");

                    b.Navigation("RequestFacility");
                });

            modelBuilder.Entity("Core.Entities.GlobalSetting", b =>
                {
                    b.HasOne("Core.Entities.User", "Creator")
                        .WithMany("CreatorGlobalSettings")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "Updater")
                        .WithMany("UpdaterGlobalSettings")
                        .HasForeignKey("UpdaterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("Core.Entities.Invoice", b =>
                {
                    b.HasOne("Core.Entities.User", "Buyer")
                        .WithMany("BuyerInvoices")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "Creator")
                        .WithMany("CreatorInvoices")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.GlobalSetting", "GlobalSetting")
                        .WithMany("Invoices")
                        .HasForeignKey("GlobalSettingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Organization", "Organization")
                        .WithMany("Invoices")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "Seller")
                        .WithMany("SellerInvoices")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Business.Transaction.WalletTransaction", "WalletTransaction")
                        .WithMany("Invoices")
                        .HasForeignKey("WalletTransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Buyer");

                    b.Navigation("Creator");

                    b.Navigation("GlobalSetting");

                    b.Navigation("Organization");

                    b.Navigation("Seller");

                    b.Navigation("WalletTransaction");
                });

            modelBuilder.Entity("Core.Entities.InvoiceDocument", b =>
                {
                    b.HasOne("Core.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceDocuments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Core.Entities.IranCreditScoring", b =>
                {
                    b.HasOne("Core.Entities.User", "Creator")
                        .WithMany("IranCreditScorings")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Business.RequestFacility.RequestFacilityGuarantor", "RequestFacilityGuarantor")
                        .WithMany("IranCreditScorings")
                        .HasForeignKey("RequestFacilityGuarantorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Business.RequestFacility.RequestFacility", "RequestFacility")
                        .WithMany("IranCreditScorings")
                        .HasForeignKey("RequestFacilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("RequestFacility");

                    b.Navigation("RequestFacilityGuarantor");
                });

            modelBuilder.Entity("Core.Entities.IranCreditScoringDocument", b =>
                {
                    b.HasOne("Core.Entities.IranCreditScoring", "IranCreditScoring")
                        .WithMany("IranCreditScoringDocuments")
                        .HasForeignKey("IranCreditScoringId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IranCreditScoring");
                });

            modelBuilder.Entity("Core.Entities.IranCreditScoringResultRule", b =>
                {
                    b.HasOne("Core.Entities.User", "Creator")
                        .WithMany("CreatorIranCreditScoringResultRules")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "Updater")
                        .WithMany("UpdaterIranCreditScoringResultRules")
                        .HasForeignKey("UpdaterId");

                    b.Navigation("Creator");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("Core.Entities.Location", b =>
                {
                    b.HasOne("Core.Entities.Location", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Core.Entities.NeginHubLog", b =>
                {
                    b.HasOne("Core.Entities.User", "Oprator")
                        .WithMany("NeginHubLogs")
                        .HasForeignKey("OpratorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Oprator");
                });

            modelBuilder.Entity("Core.Entities.NeoZarinRequestSignatureLog", b =>
                {
                    b.HasOne("Core.Entities.User", "Creator")
                        .WithMany("NeoZarinRequestSignatureLogCreators")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Business.RequestFacility.RequestFacility", "RequestFacility")
                        .WithMany("NeoZarinRequestSignatureLogs")
                        .HasForeignKey("RequestFacilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("RequestFacility");
                });

            modelBuilder.Entity("Core.Entities.Organization", b =>
                {
                    b.HasOne("Core.Entities.OrganizationType", "OrganizationType")
                        .WithMany("Organizations")
                        .HasForeignKey("OrganizationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrganizationType");
                });

            modelBuilder.Entity("Core.Entities.Person", b =>
                {
                    b.HasOne("Core.Entities.Location", "City")
                        .WithMany("CityPeople")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Country", "Country")
                        .WithMany("People")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Organization", "Organization")
                        .WithMany("People")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Core.Entities.PersonJobInfo", b =>
                {
                    b.HasOne("Core.Entities.JobTitle", "JobTitle")
                        .WithMany("PersonJobInfos")
                        .HasForeignKey("JobTitleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Person", "Person")
                        .WithMany("PersonJobInfos")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.SalaryRange", "SalaryRange")
                        .WithMany("PersonJobInfos")
                        .HasForeignKey("SalaryRangeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("JobTitle");

                    b.Navigation("Person");

                    b.Navigation("SalaryRange");
                });

            modelBuilder.Entity("Core.Entities.Plan", b =>
                {
                    b.HasOne("Core.Entities.FacilityType", "FacilityType")
                        .WithMany("Plans")
                        .HasForeignKey("FacilityTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.GlobalSetting", "GlobalSetting")
                        .WithMany("Plans")
                        .HasForeignKey("GlobalSettingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Organization", "Organization")
                        .WithMany("Plans")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FacilityType");

                    b.Navigation("GlobalSetting");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Core.Entities.PlanFile", b =>
                {
                    b.HasOne("Core.Entities.Plan", "Plan")
                        .WithMany("PlanFiles")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Core.Entities.PlanMember", b =>
                {
                    b.HasOne("Core.Entities.Location", "BirthLocation")
                        .WithMany("BirthLocationPlanMembers")
                        .HasForeignKey("BirthLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Location", "City")
                        .WithMany("CityPlanMembers")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Location", "CityOfIssue")
                        .WithMany("CityOfIssuePlanMembers")
                        .HasForeignKey("CityOfIssueId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Plan", "Plan")
                        .WithMany("PlanMembers")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("PlanMembers")
                        .HasForeignKey("UserId");

                    b.Navigation("BirthLocation");

                    b.Navigation("City");

                    b.Navigation("CityOfIssue");

                    b.Navigation("Plan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.SamatBackChequeDetail", b =>
                {
                    b.HasOne("Core.Entities.SamatBackChequeHeader", "SamatBackChequeHeader")
                        .WithMany("SamatBackChequeDetails")
                        .HasForeignKey("SamatBackChequeHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SamatBackChequeHeader");
                });

            modelBuilder.Entity("Core.Entities.SamatBackChequeHeader", b =>
                {
                    b.HasOne("Core.Entities.User", "Creator")
                        .WithMany("CreatorSamatBackChequeHeaders")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Business.RequestFacility.RequestFacility", "RequestFacility")
                        .WithMany("SamatBackChequeHeaders")
                        .HasForeignKey("RequestFacilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("RequestFacility");
                });

            modelBuilder.Entity("Core.Entities.SamatFacilityDetail", b =>
                {
                    b.HasOne("Core.Entities.SamatFacilityHeader", "SamatFacilityHeader")
                        .WithMany("SamatFacilityDetails")
                        .HasForeignKey("SamatFacilityHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SamatFacilityHeader");
                });

            modelBuilder.Entity("Core.Entities.SamatFacilityHeader", b =>
                {
                    b.HasOne("Core.Entities.User", "Creator")
                        .WithMany("CreatorSamatFacilityHeaders")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Business.RequestFacility.RequestFacility", "RequestFacility")
                        .WithMany("SamatFacilityHeaders")
                        .HasForeignKey("RequestFacilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("RequestFacility");
                });

            modelBuilder.Entity("Core.Entities.SmsVerification", b =>
                {
                    b.HasOne("Core.Entities.User", "ReceptorUser")
                        .WithMany("ReceptorSmsVerifications")
                        .HasForeignKey("ReceptorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "SenderUser")
                        .WithMany("SenderSmsVerifications")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReceptorUser");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.HasOne("Core.Entities.Person", "Person")
                        .WithOne("User")
                        .HasForeignKey("Core.Entities.User", "PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Core.Entities.UserBankAccount", b =>
                {
                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("UserBankAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.UserIdentityDocument", b =>
                {
                    b.HasOne("Core.Entities.Bank", "Bank")
                        .WithMany("UserIdentityDocuments")
                        .HasForeignKey("BankId");

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("UserIdentityDocuments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.UserInbox", b =>
                {
                    b.HasOne("Core.Entities.User", "Sender")
                        .WithMany("SenderUserInboxes")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("UserInboxes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.UserNotification", b =>
                {
                    b.HasOne("Core.Entities.User", "Sender")
                        .WithMany("UserNotifications")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.UserVAPID", "UserVAPID")
                        .WithMany("UserNotifications")
                        .HasForeignKey("UserVapidId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sender");

                    b.Navigation("UserVAPID");
                });

            modelBuilder.Entity("Core.Entities.UserRole", b =>
                {
                    b.HasOne("Core.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.UserSms", b =>
                {
                    b.HasOne("Core.Entities.User", "Sender")
                        .WithMany("SenderUserSms")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("UserSms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.UserVAPID", b =>
                {
                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("UserVAPIDs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.VerifyResultExcel", b =>
                {
                    b.HasOne("Core.Entities.User", "Creator")
                        .WithMany("VerifyResultExcels")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Organization", "Organization")
                        .WithMany("VerifyResultExcels")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Core.Entities.VerifyResultExcelDetail", b =>
                {
                    b.HasOne("Core.Entities.User", "Creator")
                        .WithMany("VerifyResultExcelDetails")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Business.RequestFacility.RequestFacility", "RequestFacility")
                        .WithMany("VerifyResultExcelDetails")
                        .HasForeignKey("RequestFacilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.VerifyResultExcel", "VerifyResultExcel")
                        .WithMany("VerifyResultExcelDetails")
                        .HasForeignKey("VerifyResultExcelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("RequestFacility");

                    b.Navigation("VerifyResultExcel");
                });

            modelBuilder.Entity("Core.Entities.WorkFlow", b =>
                {
                    b.HasOne("Core.Entities.Organization", "Organization")
                        .WithMany("WorkFlows")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Core.Entities.WorkFlowStep", b =>
                {
                    b.HasOne("Core.Entities.WorkFlowStep", "ApproveNextStep")
                        .WithMany("ApproveNextSteps")
                        .HasForeignKey("ApproveNextStepId");

                    b.HasOne("Core.Entities.WorkFlowStep", "RejectNextStep")
                        .WithMany("RejectNextSteps")
                        .HasForeignKey("RejectNextStepId");

                    b.HasOne("Core.Entities.WorkFlowStep", "ReturnToCorrectionNextStep")
                        .WithMany("ReturnToCorrectionNextSteps")
                        .HasForeignKey("ReturnToCorrectionNextStepId");

                    b.HasOne("Core.Entities.WorkFlowForm", "WorkFlowForm")
                        .WithMany("WorkFlowSteps")
                        .HasForeignKey("WorkFlowFormId");

                    b.HasOne("Core.Entities.WorkFlow", "WorkFlow")
                        .WithMany("WorkFlowSteps")
                        .HasForeignKey("WorkFlowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApproveNextStep");

                    b.Navigation("RejectNextStep");

                    b.Navigation("ReturnToCorrectionNextStep");

                    b.Navigation("WorkFlow");

                    b.Navigation("WorkFlowForm");
                });

            modelBuilder.Entity("Core.Entities.WorkFlowStepCorrection", b =>
                {
                    b.HasOne("Core.Entities.WorkFlowStep", "CurrentStep")
                        .WithMany("CurrentStepWorkFlowStepCorrections")
                        .HasForeignKey("CurrentStepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.WorkFlowStep", "ReturnToCorrectionNextStep")
                        .WithMany("ReturnToCorrectionNextStepWorkFlowStepCorrections")
                        .HasForeignKey("ReturnToCorrectionNextStepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.WorkFlowForm", "WorkFlowForm")
                        .WithMany("WorkFlowStepCorrections")
                        .HasForeignKey("WorkFlowFormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CurrentStep");

                    b.Navigation("ReturnToCorrectionNextStep");

                    b.Navigation("WorkFlowForm");
                });

            modelBuilder.Entity("Core.Entities.WorkFlowStepError", b =>
                {
                    b.HasOne("Core.Entities.WorkFlowDefaultError", "WorkFlowDefaultError")
                        .WithMany("WorkFlowStepErrors")
                        .HasForeignKey("WorkFlowDefaultErrorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.WorkFlowStep", "WorkFlowStep")
                        .WithMany("WorkFlowStepErrors")
                        .HasForeignKey("WorkFlowStepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WorkFlowDefaultError");

                    b.Navigation("WorkFlowStep");
                });

            modelBuilder.Entity("Core.Entities.WorkFlowStepRejectionReason", b =>
                {
                    b.HasOne("Core.Entities.Business.RequestFacility.RejectionReason", "RejectionReason")
                        .WithMany("WorkFlowStepRejectionReasons")
                        .HasForeignKey("RejectionReasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.WorkFlowStep", "WorkFlowStep")
                        .WithMany("WorkFlowStepRejectionReasons")
                        .HasForeignKey("WorkFlowStepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RejectionReason");

                    b.Navigation("WorkFlowStep");
                });

            modelBuilder.Entity("Core.Entities.WorkFlowStepRole", b =>
                {
                    b.HasOne("Core.Entities.Role", "Role")
                        .WithMany("WorkFlowStepRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.WorkFlowStep", "WorkFlowStep")
                        .WithMany("WorkFlowStepRoles")
                        .HasForeignKey("WorkFlowStepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("WorkFlowStep");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Core.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Business.Payment.SamanInternetPayment", b =>
                {
                    b.HasOne("Core.Entities.Business.Payment.Payment", null)
                        .WithOne()
                        .HasForeignKey("Core.Entities.Business.Payment.SamanInternetPayment", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Business.Payment.ZarinPalInternetPayment", b =>
                {
                    b.HasOne("Core.Entities.Business.Payment.Payment", null)
                        .WithOne()
                        .HasForeignKey("Core.Entities.Business.Payment.ZarinPalInternetPayment", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Bank", b =>
                {
                    b.Navigation("UserIdentityDocuments");
                });

            modelBuilder.Entity("Core.Entities.Business.Payment.Payment", b =>
                {
                    b.Navigation("PaymentReason")
                        .IsRequired();

                    b.Navigation("TransactionReason")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Business.Payment.PaymentInfo", b =>
                {
                    b.Navigation("PaymentReasons");
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RejectionReason", b =>
                {
                    b.Navigation("WorkFlowStepRejectionReasons");
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RequestFacility", b =>
                {
                    b.Navigation("ApplicantValidationResults");

                    b.Navigation("AyandehSignRequestSignatureLogs");

                    b.Navigation("FinotechLogs");

                    b.Navigation("IranCreditScorings");

                    b.Navigation("NeoZarinRequestSignatureLogs");

                    b.Navigation("PaymentReasons");

                    b.Navigation("RequestFacilityCardIssuance")
                        .IsRequired();

                    b.Navigation("RequestFacilityErrors");

                    b.Navigation("RequestFacilityGuarantors");

                    b.Navigation("RequestFacilityInstallments");

                    b.Navigation("RequestFacilityInsuranceIssuances");

                    b.Navigation("RequestFacilityPromissories");

                    b.Navigation("RequestFacilityWarranties");

                    b.Navigation("RequestFacilityWorkFlowSteps");

                    b.Navigation("RequestFaciliyUsagePlaces");

                    b.Navigation("SamatBackChequeHeaders");

                    b.Navigation("SamatFacilityHeaders");

                    b.Navigation("TransactionReasons");

                    b.Navigation("VerifyResultExcelDetails");

                    b.Navigation("WalletTransaction")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RequestFacilityGuarantor", b =>
                {
                    b.Navigation("IranCreditScorings");

                    b.Navigation("PaymentReasons");

                    b.Navigation("RequestFacilityGuarantorWarranty")
                        .IsRequired();

                    b.Navigation("RequestFacilityGuarantorWorkFlowSteps");

                    b.Navigation("TransactionReasons");
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RequestFacilityInstallment", b =>
                {
                    b.Navigation("PaymentReasons");

                    b.Navigation("TransactionReasons");
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RequestFacilityInsuranceIssuance", b =>
                {
                    b.Navigation("RequestFacilityInsuranceIssuanceDocuments");
                });

            modelBuilder.Entity("Core.Entities.Business.RequestFacility.RequestFacilityWorkFlowStep", b =>
                {
                    b.Navigation("RequestFacilityWorkFlowStepWorkFlowStepRejectionReasons");
                });

            modelBuilder.Entity("Core.Entities.Business.Transaction.Transaction", b =>
                {
                    b.Navigation("TransactionReason")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Business.Transaction.WalletTransaction", b =>
                {
                    b.Navigation("Child")
                        .IsRequired();

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("Core.Entities.Country", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("Core.Entities.FacilityType", b =>
                {
                    b.Navigation("Plans");

                    b.Navigation("RequestFacilities");
                });

            modelBuilder.Entity("Core.Entities.GlobalSetting", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Plans");

                    b.Navigation("RequestFacilities");
                });

            modelBuilder.Entity("Core.Entities.Invoice", b =>
                {
                    b.Navigation("InvoiceDocuments");
                });

            modelBuilder.Entity("Core.Entities.IranCreditScoring", b =>
                {
                    b.Navigation("IranCreditScoringDocuments");
                });

            modelBuilder.Entity("Core.Entities.IranCreditScoringResultRule", b =>
                {
                    b.Navigation("RequestFacilities");

                    b.Navigation("RequestFacilityGuarantors");
                });

            modelBuilder.Entity("Core.Entities.JobTitle", b =>
                {
                    b.Navigation("PersonJobInfos");
                });

            modelBuilder.Entity("Core.Entities.Location", b =>
                {
                    b.Navigation("BirthLocationPlanMembers");

                    b.Navigation("Childs");

                    b.Navigation("CityOfIssuePlanMembers");

                    b.Navigation("CityPeople");

                    b.Navigation("CityPlanMembers");
                });

            modelBuilder.Entity("Core.Entities.Organization", b =>
                {
                    b.Navigation("ApplicantValidationResults");

                    b.Navigation("FacilityTypes");

                    b.Navigation("Invoices");

                    b.Navigation("OrganizationRequestFacilities");

                    b.Navigation("PaymentInfos");

                    b.Navigation("People");

                    b.Navigation("Plans");

                    b.Navigation("Transactions");

                    b.Navigation("VerifyResultExcels");

                    b.Navigation("WalletTransactions");

                    b.Navigation("WorkFlows");
                });

            modelBuilder.Entity("Core.Entities.OrganizationType", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("Core.Entities.Person", b =>
                {
                    b.Navigation("PersonJobInfos");

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Plan", b =>
                {
                    b.Navigation("PlanFiles");

                    b.Navigation("PlanMembers");
                });

            modelBuilder.Entity("Core.Entities.PlanMember", b =>
                {
                    b.Navigation("RequestFacilities");
                });

            modelBuilder.Entity("Core.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");

                    b.Navigation("WorkFlowStepRoles");
                });

            modelBuilder.Entity("Core.Entities.SalaryRange", b =>
                {
                    b.Navigation("PersonJobInfos");
                });

            modelBuilder.Entity("Core.Entities.SamatBackChequeHeader", b =>
                {
                    b.Navigation("SamatBackChequeDetails");
                });

            modelBuilder.Entity("Core.Entities.SamatFacilityHeader", b =>
                {
                    b.Navigation("SamatFacilityDetails");
                });

            modelBuilder.Entity("Core.Entities.Status", b =>
                {
                    b.Navigation("RequestFacilityGuarantorWorkFlowSteps");

                    b.Navigation("RequestFacilityWorkFlowSteps");
                });

            modelBuilder.Entity("Core.Entities.UsagePlace", b =>
                {
                    b.Navigation("RequestFaciliyUsagePlaces");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Navigation("ApplicantValidationResults");

                    b.Navigation("ApproverRequestFacilityGuarantors");

                    b.Navigation("AyandehSignRequestSignatureLogCreators");

                    b.Navigation("BuyerInvoices");

                    b.Navigation("BuyerPaymentInfos");

                    b.Navigation("CreatorGlobalSettings");

                    b.Navigation("CreatorInvoices");

                    b.Navigation("CreatorIranCreditScoringResultRules");

                    b.Navigation("CreatorPaymentInfos");

                    b.Navigation("CreatorSamatBackChequeHeaders");

                    b.Navigation("CreatorSamatFacilityHeaders");

                    b.Navigation("CreatorTransactions");

                    b.Navigation("CreatorWalletTransactions");

                    b.Navigation("FinotechLogs");

                    b.Navigation("IranCreditScorings");

                    b.Navigation("NeginHubLogs");

                    b.Navigation("NeoZarinRequestSignatureLogCreators");

                    b.Navigation("OperatorRequestFacilities");

                    b.Navigation("Payments");

                    b.Navigation("PersonTransactions");

                    b.Navigation("PersonWalletTransactions");

                    b.Navigation("PlanMembers");

                    b.Navigation("ReceptorSmsVerifications");

                    b.Navigation("RequestFacilityBuyers");

                    b.Navigation("RequestFacilityGuarantorWorkFlowSteps");

                    b.Navigation("RequestFacilityGuarantors");

                    b.Navigation("RequestFacilityInsuranceIssuances");

                    b.Navigation("RequestFacilityWorkFlowSteps");

                    b.Navigation("SellerInvoices");

                    b.Navigation("SellerPaymentInfos");

                    b.Navigation("SenderSmsVerifications");

                    b.Navigation("SenderUserInboxes");

                    b.Navigation("SenderUserSms");

                    b.Navigation("UpdaterGlobalSettings");

                    b.Navigation("UpdaterIranCreditScoringResultRules");

                    b.Navigation("UserBankAccounts");

                    b.Navigation("UserIdentityDocuments");

                    b.Navigation("UserInboxes");

                    b.Navigation("UserNotifications");

                    b.Navigation("UserRoles");

                    b.Navigation("UserSms");

                    b.Navigation("UserVAPIDs");

                    b.Navigation("VerifyResultExcelDetails");

                    b.Navigation("VerifyResultExcels");
                });

            modelBuilder.Entity("Core.Entities.UserVAPID", b =>
                {
                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("Core.Entities.VerifyResultExcel", b =>
                {
                    b.Navigation("VerifyResultExcelDetails");
                });

            modelBuilder.Entity("Core.Entities.WorkFlow", b =>
                {
                    b.Navigation("WorkFlowSteps");
                });

            modelBuilder.Entity("Core.Entities.WorkFlowDefaultError", b =>
                {
                    b.Navigation("WorkFlowStepErrors");
                });

            modelBuilder.Entity("Core.Entities.WorkFlowForm", b =>
                {
                    b.Navigation("WorkFlowStepCorrections");

                    b.Navigation("WorkFlowSteps");
                });

            modelBuilder.Entity("Core.Entities.WorkFlowStep", b =>
                {
                    b.Navigation("ApproveNextSteps");

                    b.Navigation("CurrentStepWorkFlowStepCorrections");

                    b.Navigation("RejectNextSteps");

                    b.Navigation("RequestFacilityGuarantorWorkFlowSteps");

                    b.Navigation("RequestFacilityWorkFlowSteps");

                    b.Navigation("ReturnToCorrectionNextStepWorkFlowStepCorrections");

                    b.Navigation("ReturnToCorrectionNextSteps");

                    b.Navigation("WorkFlowStepErrors");

                    b.Navigation("WorkFlowStepRejectionReasons");

                    b.Navigation("WorkFlowStepRoles");
                });

            modelBuilder.Entity("Core.Entities.WorkFlowStepError", b =>
                {
                    b.Navigation("RequestFacilityErrors");
                });

            modelBuilder.Entity("Core.Entities.WorkFlowStepRejectionReason", b =>
                {
                    b.Navigation("RequestFacilityWorkFlowStepWorkFlowStepRejectionReasons");
                });
#pragma warning restore 612, 618
        }
    }
}
